<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A technical blog by Joshua Caleb Collins]]></title>
  <link href="http://joshuaccollins.github.io/atom.xml" rel="self"/>
  <link href="http://joshuaccollins.github.io/"/>
  <updated>2013-06-17T01:01:27-04:00</updated>
  <id>http://joshuaccollins.github.io/</id>
  <author>
    <name><![CDATA[Joshua Caleb Collins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An introduction to Ruby Motion]]></title>
    <link href="http://joshuaccollins.github.io/blog/2013/06/16/an-introduction-to-ruby-motion/"/>
    <updated>2013-06-16T23:02:00-04:00</updated>
    <id>http://joshuaccollins.github.io/blog/2013/06/16/an-introduction-to-ruby-motion</id>
    <content type="html"><![CDATA[<p>This weekend we had yet another plethora of assignments to complete for our <a href="https://flatironschool.com">Flatiron School</a> <a href="https://twitter.com/aviflombaum">Captain</a>. One of the assignments was to dive into <a href="http://www.speakerdeck.com">Speaker Deck</a> and find something of interest and report back to the class.</p>

<p>We&rsquo;re about to start our third week and I feel like I&rsquo;ve been thrown into the rushing rapids of a river that will eventually spit me out in the &ldquo;deep end&rdquo; of the learning pool. For some reason, even though I&rsquo;m still grasping for air and am having difficulties with the current basics of Ruby, I decided to explore <a href="www.RubyMotion.com">RubyMotion</a>. I was sick of the basics, or should I say the frustration with feeling like I was walking with concrete shoes and wanted to explore something new.</p>

<p>Thanks to <a href="http://openmonkey.com/">Tim Riley&rsquo;s</a> presentation <a href="http://openmonkey.com/">Introduction to RubyMotion</a> on Speaker Deck, I was able to start scratching the service on how Ruby could be used to developed iOS apps for iPhone, iPad, and OSX for MAC.</p>

<p>This blog post will focus on the big take-aways I got from Tim&rsquo;s presentation with a little additional research on the <a href="www.RubyMotion.com">RubyMotion</a> site. Before diving into the overview, please know I am new to the development world and have no experience developing for mobile devices.</p>

<h3>RubyMotion Takeaways:</h3>

<h5>Terminal</h5>

<p>That&rsquo;s right, you get to use your terminal to build your iOS app. Some <a href="http://devcodehack.com/xcode-sucks-and-heres-why/">people</a> are pretty <a href="http://code-ninja.org/blog/2012/03/14/ios-pain-points-autocomplete-in-xcode-is-a-usability-disaster/">unhappy</a> with the Xcode process and development environment. Developers wanted to simply use their Terminal to develop and test their mobile products and that&rsquo;s what RubyMotion gave them.</p>

<h5>Editor</h5>

<p>Once again, users were very unhappy with the editor in Xcode so RubyMotion allows users to continue using their own Text Editors. Since I&rsquo;m a newbie and haven&rsquo;t experienced the difficulties with Xcode, I&rsquo;ll trust the Tim&rsquo;s notes and the fact that RubyMotion has it as one of the six selling points on their website it must be important.</p>

<h5>Interactive</h5>

<p>There is an interactive console that lets you navigate and explore the process in your code and on a iPhone simulator. This function is pretty cool because it somewhat acts as an &ldquo;inspect element&rdquo; tool on websites bringing you to the exact spot on the code with a single click so you can make changes and edits.</p>

<h5>3rd Party Provider</h5>

<p>Learning more and more about the development community, the one thing I have been so surprised with is all the &ldquo;open-source&rdquo; tools there are, for FREE. Crazy. Well, in this case, RubyMotion is not open-sourced and comes with a <a href="http://sites.fastspring.com/hipbyte/product/rubymotion">$200</a> price tag.</p>

<h5>Still need to know Objective-C</h5>

<p>Yes, bummer. I was hoping for a turn-key solution that would magically transport my code into a beautiful iOS app. In this case, RubyMotion does do a lot of the heavy lifting, but you will need to learn how to interpret Apple&rsquo;s interfaces and understand how to call your code from Ruby. RubyMotion does provide helpful documentation.</p>

<h5>GEMS != workâ€¦what?!?!?!</h5>

<p>Yes, I couldn&rsquo;t believe it too. Last week we started exploring the <a href="http://rubygems.org/">Ruby Gem Library</a> and learning about the power behind Ruby, so I was very very surprised to learn RubyMotion did not support it. I don&rsquo;t know implications this will have on my future work, but hopefully there is a solid solution. Here is what RubyMotion said about the Gem Issue: &ldquo;Because RubyMotion implements a dialect of Ruby that is statically compiled, regular Ruby gems will not work in RubyMotion.&rdquo; They do have their &ldquo;own flavor of gems&rdquo; that they call <a href="http://rubymotion-wrappers.com/">RubyMotion wrappers</a>.</p>

<h5>Buy it!</h5>

<p>If you want to build for iOS and don&rsquo;t want to have to learn Objective-C from scratch, then it&rsquo;s the best option you have for mobile development.</p>

<p>A big thank you again to <a href="http://openmonkey.com/">Tim Riley</a> for his <a href="http://openmonkey.com/">presentation</a> on Speaker Deck. For more advanced developers, and those with experience with RubyMotion, please do excuse my novice review of this tool. If you have any further suggestions please feel free to share them with me.</p>

<p>Onward!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating your foundation]]></title>
    <link href="http://joshuaccollins.github.io/blog/2013/06/11/creating-your-foundation/"/>
    <updated>2013-06-11T19:26:00-04:00</updated>
    <id>http://joshuaccollins.github.io/blog/2013/06/11/creating-your-foundation</id>
    <content type="html"><![CDATA[<h2>The three-week crash course about computer programming leveraging existing teaching tools.</h2>

<h3>Initial Greeting and Background</h3>

<p>Greetings and welcome to my technical blog. This is my first blog (ever) so bear with me on the initial few posts until I find the rhythm. I am currently in the second week of my twelve-week epic journey as a student at The Flatiron School in New York City. At the end of this quest, I aim to have the skills and mindset to be a Ruby on Rails developer. Before jumping into the post, I wanted to give you some background on how I ended up in a fully immersive coding course and put everything else in my life on hold.</p>

<p>My first experience interacting with technology (outside of surfing the web) came after I graduated college and was embarking on my first startup. We came to a point where we could no longer afford to pay our development firm to update our website. I dove into DreamWeaver and started to learn the ins-and-outs of HTML and PHP. The experience was a rude awakening and the first time I desired to really know how to make things work from a development perspective&hellip; but that phase was limited and quickly forgotten.</p>

<p>A couple of years later, I launched my second venture where technology was our core offering. I was still on the management side but exposed to the technology aspect of the following: working with a developer, firing a developer, dumping the initial code, learning about project management, understanding the conceptual framework of building websites, databases, learning the importance of user flow and user interface design, finding bugs, fixing bugs, and finding more bugs. It was too much, and I was way in over my head. Many times through the process I muttered to myself, &ldquo;If only I knew how to code&hellip;&rdquo; I wouldn&rsquo;t have had to depend on outside developers or initial seed-funding to get my ideas off the ground.</p>

<p>Fast forward a few more years, and I found myself looking to start another company. Since I had still not found my much-needed technical co-founder, I decided to take things into my own hands and enrolled in The Flatiron School. I was honored to be one of the few accepted. Before starting the semester, there was a plethora of prep-work that was required of the students, amounting to over 100 hours. Through this process I was exposed to many various tools online aimed at helping beginners grasp the concepts of coding.</p>

<p>My posts will be in three parts split into three weeks and will pull from the various resources that exist online. This blog is written for those who do not have an experience with web development. I hope to provide a solid foundation from which you will be able to dive further into learning other development frameworks such as Ruby, Python, PHP, etc.</p>

<h2>WEEK 1</h2>

<h3>The Basics</h3>

<table>
<thead>
<tr>
<th></th>
<th> Topic       </th>
<th> Source        </th>
<th> Est. Time </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Website Basics </td>
<td> <a href="http://teamtreehouse.com/library/websites/website-basics/website-basics">Treehouse</a>  </td>
<td> 1 hr. |</td>
</tr>
<tr>
<td></td>
<td> Graphic Basics </td>
<td> <a href="http://teamtreehouse.com/library/websites/technology-foundations/graphic-basics">Treehouse</a> </td>
<td> 30 min. |</td>
</tr>
<tr>
<td></td>
<td> Learning Shortcuts </td>
<td> <a href="https://www.shortcutfoo.com">ShortcutFoo</a> </td>
<td> TBD |</td>
</tr>
<tr>
<td></td>
<td> Aesthetic Foundation </td>
<td> <a href="http://teamtreehouse.com/library/websites/aesthetic-foundations">Treehouse</a> </td>
<td> 2.5 hrs. |</td>
</tr>
<tr>
<td></td>
<td> Technology Terms </td>
<td> <a href="http://www.skillcrush.com/terms/">Skillcrush</a> </td>
<td> 1 hr. |</td>
</tr>
</tbody>
</table>


<h3>Command Line // Terminal // Bash</h3>

<table>
<thead>
<tr>
<th></th>
<th> Topic       </th>
<th> Source        </th>
<th> Est. Time </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Getting started with the Console </td>
<td> <a href="http://teamtreehouse.com/library/programming/console-foundations/getting-started-with-the-console">Treehouse</a> </td>
<td> 1 hr. |</td>
</tr>
<tr>
<td></td>
<td> Command Line Basics </td>
<td> <a href="http://blog.teamtreehouse.com/command-line-basics">Treehouse</a> </td>
<td> 30 min. |</td>
</tr>
<tr>
<td></td>
<td> Bash Basics </td>
<td> <a href="http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything">Lifehacker</a> </td>
<td> 30 min. |</td>
</tr>
<tr>
<td></td>
<td> Unix for Mac OS X </td>
<td> <a href="http://www.lynda.com/Mac-OS-X-10-6-tutorials/Unix-for-Mac-OS-X-Users/78546-2.html">Lynda</a> </td>
<td> 7 hrs. |</td>
</tr>
</tbody>
</table>


<h3>HMTL</h3>

<table>
<thead>
<tr>
<th></th>
<th> Topic       </th>
<th> Source        </th>
<th> Est. Time </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Web Fundamentals (Focus on 1-3) </td>
<td> <a href="http://www.codecademy.com/tracks/web">Codecademy</a> </td>
<td> 4 hrs. |</td>
</tr>
<tr>
<td></td>
<td> HTML </td>
<td> <a href="http://teamtreehouse.com/library/websites/html">Treehouse</a> </td>
<td> 8 hrs. |</td>
</tr>
</tbody>
</table>


<h3>CSS</h3>

<table>
<thead>
<tr>
<th></th>
<th> Topic       </th>
<th> Source        </th>
<th> Est. Time </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Web Fundamentals (Focus on 4-6) </td>
<td> <a href="http://www.codecademy.com/tracks/web">Codecademy</a> </td>
<td> 4 hrs. |</td>
</tr>
<tr>
<td></td>
<td> CSS Foundations </td>
<td> <a href="http://teamtreehouse.com/library/websites/css-foundations-2">Treehouse</a> </td>
<td> 15 hrs. |</td>
</tr>
</tbody>
</table>


<h3>Week 1 Review Exercises</h3>

<table>
<thead>
<tr>
<th></th>
<th> Topic       </th>
<th> Source        </th>
<th> Est. Time </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 3 for 5 (HTML5 &amp; CSS3) </td>
<td> <a href="http://www.codeschool.com/courses/functional-html5-css3">Code School</a> </td>
<td> 6 hrs. |</td>
</tr>
<tr>
<td></td>
<td> Build a Simple Website </td>
<td> <a href="http://teamtreehouse.com/library/websites/build-a-simple-website">Treehouse</a> </td>
<td> 6 hrs. |</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
